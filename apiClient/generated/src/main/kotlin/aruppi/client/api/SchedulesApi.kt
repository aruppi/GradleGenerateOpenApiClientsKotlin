/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package aruppi.client.api

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import aruppi.client.model.Days
import aruppi.client.model.ScheduleSlim

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class SchedulesApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost:5001")
        }
    }

    /**
     * GetSchedulesFilteredByDayOfWeek
     * 
     * @param day  (optional)
     * @param kids  (optional)
     * @param sfw  (optional)
     * @param unapproved  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @return kotlin.collections.List<ScheduleSlim>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV0AlphaSchedulesGet(day: Days? = null, kids: kotlin.Boolean? = null, sfw: kotlin.Boolean? = null, unapproved: kotlin.Boolean? = null, page: kotlin.Int? = null, limit: kotlin.Int? = null) : kotlin.collections.List<ScheduleSlim> {
        val localVarResponse = apiV0AlphaSchedulesGetWithHttpInfo(day = day, kids = kids, sfw = sfw, unapproved = unapproved, page = page, limit = limit)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<ScheduleSlim>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GetSchedulesFilteredByDayOfWeek
     * 
     * @param day  (optional)
     * @param kids  (optional)
     * @param sfw  (optional)
     * @param unapproved  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @return ApiResponse<kotlin.collections.List<ScheduleSlim>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV0AlphaSchedulesGetWithHttpInfo(day: Days?, kids: kotlin.Boolean?, sfw: kotlin.Boolean?, unapproved: kotlin.Boolean?, page: kotlin.Int?, limit: kotlin.Int?) : ApiResponse<kotlin.collections.List<ScheduleSlim>?> {
        val localVariableConfig = apiV0AlphaSchedulesGetRequestConfig(day = day, kids = kids, sfw = sfw, unapproved = unapproved, page = page, limit = limit)

        return request<Unit, kotlin.collections.List<ScheduleSlim>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV0AlphaSchedulesGet
     *
     * @param day  (optional)
     * @param kids  (optional)
     * @param sfw  (optional)
     * @param unapproved  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @return RequestConfig
     */
    fun apiV0AlphaSchedulesGetRequestConfig(day: Days?, kids: kotlin.Boolean?, sfw: kotlin.Boolean?, unapproved: kotlin.Boolean?, page: kotlin.Int?, limit: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (day != null) {
                    put("Day", listOf(day.toString()))
                }
                if (kids != null) {
                    put("Kids", listOf(kids.toString()))
                }
                if (sfw != null) {
                    put("Sfw", listOf(sfw.toString()))
                }
                if (unapproved != null) {
                    put("Unapproved", listOf(unapproved.toString()))
                }
                if (page != null) {
                    put("Page", listOf(page.toString()))
                }
                if (limit != null) {
                    put("Limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v0-alpha/Schedules",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
