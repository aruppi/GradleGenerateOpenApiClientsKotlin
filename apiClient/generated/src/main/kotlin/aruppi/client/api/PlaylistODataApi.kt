/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package aruppi.client.api

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import aruppi.client.model.Show

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class PlaylistODataApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost:5001")
        }
    }

    /**
     * 
     * Requiered Autorizations &#x3D;&gt;  Default Authorization
     * @param select  (optional)
     * @param expand  (optional)
     * @param filter  (optional)
     * @param orderby  (optional)
     * @param top  (optional)
     * @param skip  (optional)
     * @param count  (optional)
     * @return kotlin.collections.List<Show>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV0AlphaPlaylistODataGet(select: kotlin.String? = null, expand: kotlin.String? = null, filter: kotlin.String? = null, orderby: kotlin.String? = null, top: kotlin.Int? = null, skip: kotlin.Int? = null, count: kotlin.Boolean? = null) : kotlin.collections.List<Show> {
        val localVarResponse = apiV0AlphaPlaylistODataGetWithHttpInfo(select = select, expand = expand, filter = filter, orderby = orderby, top = top, skip = skip, count = count)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<Show>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Requiered Autorizations &#x3D;&gt;  Default Authorization
     * @param select  (optional)
     * @param expand  (optional)
     * @param filter  (optional)
     * @param orderby  (optional)
     * @param top  (optional)
     * @param skip  (optional)
     * @param count  (optional)
     * @return ApiResponse<kotlin.collections.List<Show>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV0AlphaPlaylistODataGetWithHttpInfo(select: kotlin.String?, expand: kotlin.String?, filter: kotlin.String?, orderby: kotlin.String?, top: kotlin.Int?, skip: kotlin.Int?, count: kotlin.Boolean?) : ApiResponse<kotlin.collections.List<Show>?> {
        val localVariableConfig = apiV0AlphaPlaylistODataGetRequestConfig(select = select, expand = expand, filter = filter, orderby = orderby, top = top, skip = skip, count = count)

        return request<Unit, kotlin.collections.List<Show>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV0AlphaPlaylistODataGet
     *
     * @param select  (optional)
     * @param expand  (optional)
     * @param filter  (optional)
     * @param orderby  (optional)
     * @param top  (optional)
     * @param skip  (optional)
     * @param count  (optional)
     * @return RequestConfig
     */
    fun apiV0AlphaPlaylistODataGetRequestConfig(select: kotlin.String?, expand: kotlin.String?, filter: kotlin.String?, orderby: kotlin.String?, top: kotlin.Int?, skip: kotlin.Int?, count: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (select != null) {
                    put("select", listOf(select.toString()))
                }
                if (expand != null) {
                    put("expand", listOf(expand.toString()))
                }
                if (filter != null) {
                    put("filter", listOf(filter.toString()))
                }
                if (orderby != null) {
                    put("orderby", listOf(orderby.toString()))
                }
                if (top != null) {
                    put("top", listOf(top.toString()))
                }
                if (skip != null) {
                    put("skip", listOf(skip.toString()))
                }
                if (count != null) {
                    put("count", listOf(count.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json;odata.metadata=minimal;odata.streaming=true, application/json;odata.metadata=minimal;odata.streaming=false, application/json;odata.metadata=minimal, application/json;odata.metadata=full;odata.streaming=true, application/json;odata.metadata=full;odata.streaming=false, application/json;odata.metadata=full, application/json;odata.metadata=none;odata.streaming=true, application/json;odata.metadata=none;odata.streaming=false, application/json;odata.metadata=none, application/json;odata.streaming=true, application/json;odata.streaming=false, application/json, application/octet-stream"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v0-alpha/PlaylistOData",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
