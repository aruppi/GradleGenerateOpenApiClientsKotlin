/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package aruppi.api.client.api

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import aruppi.api.client.model.Show
import aruppi.api.client.model.ShowTempColumnsOrderBy
import aruppi.api.client.model.ShowTempIncludes
import aruppi.api.client.model.ShowTempPage
import aruppi.api.client.model.StringComparationType

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class ShowApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost:5001")
        }
    }

    /**
     * GetShowList
     * Sample Description
     * @param orderBy  (optional)
     * @param includes  (optional)
     * @param pageSize  (optional)
     * @param pageIndex  (optional)
     * @param idMax  (optional)
     * @param idMin  (optional)
     * @param onEmision  (optional)
     * @param name  (optional)
     * @param nameComparationType  (optional)
     * @param runtimeMax  (optional)
     * @param runtimeMin  (optional)
     * @param premieredMax  (optional)
     * @param premieredMin  (optional)
     * @return ShowTempPage
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV0AlphaShowAltGetGet(orderBy: kotlin.collections.List<ShowTempColumnsOrderBy>? = null, includes: kotlin.collections.List<ShowTempIncludes>? = null, pageSize: kotlin.Int? = null, pageIndex: kotlin.Int? = null, idMax: java.util.UUID? = null, idMin: java.util.UUID? = null, onEmision: kotlin.Boolean? = null, name: kotlin.String? = null, nameComparationType: StringComparationType? = null, runtimeMax: kotlin.Int? = null, runtimeMin: kotlin.Int? = null, premieredMax: java.time.OffsetDateTime? = null, premieredMin: java.time.OffsetDateTime? = null) : ShowTempPage {
        val localVarResponse = apiV0AlphaShowAltGetGetWithHttpInfo(orderBy = orderBy, includes = includes, pageSize = pageSize, pageIndex = pageIndex, idMax = idMax, idMin = idMin, onEmision = onEmision, name = name, nameComparationType = nameComparationType, runtimeMax = runtimeMax, runtimeMin = runtimeMin, premieredMax = premieredMax, premieredMin = premieredMin)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ShowTempPage
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GetShowList
     * Sample Description
     * @param orderBy  (optional)
     * @param includes  (optional)
     * @param pageSize  (optional)
     * @param pageIndex  (optional)
     * @param idMax  (optional)
     * @param idMin  (optional)
     * @param onEmision  (optional)
     * @param name  (optional)
     * @param nameComparationType  (optional)
     * @param runtimeMax  (optional)
     * @param runtimeMin  (optional)
     * @param premieredMax  (optional)
     * @param premieredMin  (optional)
     * @return ApiResponse<ShowTempPage?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV0AlphaShowAltGetGetWithHttpInfo(orderBy: kotlin.collections.List<ShowTempColumnsOrderBy>?, includes: kotlin.collections.List<ShowTempIncludes>?, pageSize: kotlin.Int?, pageIndex: kotlin.Int?, idMax: java.util.UUID?, idMin: java.util.UUID?, onEmision: kotlin.Boolean?, name: kotlin.String?, nameComparationType: StringComparationType?, runtimeMax: kotlin.Int?, runtimeMin: kotlin.Int?, premieredMax: java.time.OffsetDateTime?, premieredMin: java.time.OffsetDateTime?) : ApiResponse<ShowTempPage?> {
        val localVariableConfig = apiV0AlphaShowAltGetGetRequestConfig(orderBy = orderBy, includes = includes, pageSize = pageSize, pageIndex = pageIndex, idMax = idMax, idMin = idMin, onEmision = onEmision, name = name, nameComparationType = nameComparationType, runtimeMax = runtimeMax, runtimeMin = runtimeMin, premieredMax = premieredMax, premieredMin = premieredMin)

        return request<Unit, ShowTempPage>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV0AlphaShowAltGetGet
     *
     * @param orderBy  (optional)
     * @param includes  (optional)
     * @param pageSize  (optional)
     * @param pageIndex  (optional)
     * @param idMax  (optional)
     * @param idMin  (optional)
     * @param onEmision  (optional)
     * @param name  (optional)
     * @param nameComparationType  (optional)
     * @param runtimeMax  (optional)
     * @param runtimeMin  (optional)
     * @param premieredMax  (optional)
     * @param premieredMin  (optional)
     * @return RequestConfig
     */
    fun apiV0AlphaShowAltGetGetRequestConfig(orderBy: kotlin.collections.List<ShowTempColumnsOrderBy>?, includes: kotlin.collections.List<ShowTempIncludes>?, pageSize: kotlin.Int?, pageIndex: kotlin.Int?, idMax: java.util.UUID?, idMin: java.util.UUID?, onEmision: kotlin.Boolean?, name: kotlin.String?, nameComparationType: StringComparationType?, runtimeMax: kotlin.Int?, runtimeMin: kotlin.Int?, premieredMax: java.time.OffsetDateTime?, premieredMin: java.time.OffsetDateTime?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (orderBy != null) {
                    put("OrderBy", toMultiValue(orderBy.toList(), "multi"))
                }
                if (includes != null) {
                    put("Includes", toMultiValue(includes.toList(), "multi"))
                }
                if (pageSize != null) {
                    put("PageSize", listOf(pageSize.toString()))
                }
                if (pageIndex != null) {
                    put("PageIndex", listOf(pageIndex.toString()))
                }
                if (idMax != null) {
                    put("IdMax", listOf(idMax.toString()))
                }
                if (idMin != null) {
                    put("IdMin", listOf(idMin.toString()))
                }
                if (onEmision != null) {
                    put("OnEmision", listOf(onEmision.toString()))
                }
                if (name != null) {
                    put("Name", listOf(name.toString()))
                }
                if (nameComparationType != null) {
                    put("NameComparationType", listOf(nameComparationType.toString()))
                }
                if (runtimeMax != null) {
                    put("RuntimeMax", listOf(runtimeMax.toString()))
                }
                if (runtimeMin != null) {
                    put("RuntimeMin", listOf(runtimeMin.toString()))
                }
                if (premieredMax != null) {
                    put("PremieredMax", listOf(parseDateToQueryString(premieredMax)))
                }
                if (premieredMin != null) {
                    put("PremieredMin", listOf(parseDateToQueryString(premieredMin)))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json;odata.metadata=minimal;odata.streaming=true, application/json;odata.metadata=minimal;odata.streaming=false, application/json;odata.metadata=minimal, application/json;odata.metadata=full;odata.streaming=true, application/json;odata.metadata=full;odata.streaming=false, application/json;odata.metadata=full, application/json;odata.metadata=none;odata.streaming=true, application/json;odata.metadata=none;odata.streaming=false, application/json;odata.metadata=none, application/json;odata.streaming=true, application/json;odata.streaming=false, application/json, application/octet-stream"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v0-alpha/Show/AltGet",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GetShowList
     * Sample Description
     * @param showName  (optional)
     * @return kotlin.collections.List<Show>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV0AlphaShowAsdasGet(showName: kotlin.String? = null) : kotlin.collections.List<Show> {
        val localVarResponse = apiV0AlphaShowAsdasGetWithHttpInfo(showName = showName)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<Show>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GetShowList
     * Sample Description
     * @param showName  (optional)
     * @return ApiResponse<kotlin.collections.List<Show>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV0AlphaShowAsdasGetWithHttpInfo(showName: kotlin.String?) : ApiResponse<kotlin.collections.List<Show>?> {
        val localVariableConfig = apiV0AlphaShowAsdasGetRequestConfig(showName = showName)

        return request<Unit, kotlin.collections.List<Show>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV0AlphaShowAsdasGet
     *
     * @param showName  (optional)
     * @return RequestConfig
     */
    fun apiV0AlphaShowAsdasGetRequestConfig(showName: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (showName != null) {
                    put("showName", listOf(showName.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json;odata.metadata=minimal;odata.streaming=true, application/json;odata.metadata=minimal;odata.streaming=false, application/json;odata.metadata=minimal, application/json;odata.metadata=full;odata.streaming=true, application/json;odata.metadata=full;odata.streaming=false, application/json;odata.metadata=full, application/json;odata.metadata=none;odata.streaming=true, application/json;odata.metadata=none;odata.streaming=false, application/json;odata.metadata=none, application/json;odata.streaming=true, application/json;odata.streaming=false, application/json, application/octet-stream"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v0-alpha/Show/asdas",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * GetShowList
     * Sample Description
     * @param showName  (optional)
     * @return kotlin.collections.List<Show>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV0AlphaShowGet(showName: kotlin.String? = null) : kotlin.collections.List<Show> {
        val localVarResponse = apiV0AlphaShowGetWithHttpInfo(showName = showName)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<Show>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GetShowList
     * Sample Description
     * @param showName  (optional)
     * @return ApiResponse<kotlin.collections.List<Show>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV0AlphaShowGetWithHttpInfo(showName: kotlin.String?) : ApiResponse<kotlin.collections.List<Show>?> {
        val localVariableConfig = apiV0AlphaShowGetRequestConfig(showName = showName)

        return request<Unit, kotlin.collections.List<Show>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV0AlphaShowGet
     *
     * @param showName  (optional)
     * @return RequestConfig
     */
    fun apiV0AlphaShowGetRequestConfig(showName: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (showName != null) {
                    put("showName", listOf(showName.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json;odata.metadata=minimal;odata.streaming=true, application/json;odata.metadata=minimal;odata.streaming=false, application/json;odata.metadata=minimal, application/json;odata.metadata=full;odata.streaming=true, application/json;odata.metadata=full;odata.streaming=false, application/json;odata.metadata=full, application/json;odata.metadata=none;odata.streaming=true, application/json;odata.metadata=none;odata.streaming=false, application/json;odata.metadata=none, application/json;odata.streaming=true, application/json;odata.streaming=false, application/json, application/octet-stream"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v0-alpha/Show",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * UpdateAvailableShows
     * Sample Description  Requiered Autorizations &#x3D;&gt;  Default Authorization
     * @param startingIdInclusive  (optional, default to 1)
     * @param endingIdExclusive  (optional, default to 6)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV0AlphaShowUpdatePost(startingIdInclusive: kotlin.Int? = 1, endingIdExclusive: kotlin.Int? = 6) : Unit {
        val localVarResponse = apiV0AlphaShowUpdatePostWithHttpInfo(startingIdInclusive = startingIdInclusive, endingIdExclusive = endingIdExclusive)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * UpdateAvailableShows
     * Sample Description  Requiered Autorizations &#x3D;&gt;  Default Authorization
     * @param startingIdInclusive  (optional, default to 1)
     * @param endingIdExclusive  (optional, default to 6)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV0AlphaShowUpdatePostWithHttpInfo(startingIdInclusive: kotlin.Int?, endingIdExclusive: kotlin.Int?) : ApiResponse<Unit?> {
        val localVariableConfig = apiV0AlphaShowUpdatePostRequestConfig(startingIdInclusive = startingIdInclusive, endingIdExclusive = endingIdExclusive)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV0AlphaShowUpdatePost
     *
     * @param startingIdInclusive  (optional, default to 1)
     * @param endingIdExclusive  (optional, default to 6)
     * @return RequestConfig
     */
    fun apiV0AlphaShowUpdatePostRequestConfig(startingIdInclusive: kotlin.Int?, endingIdExclusive: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (startingIdInclusive != null) {
                    put("startingIdInclusive", listOf(startingIdInclusive.toString()))
                }
                if (endingIdExclusive != null) {
                    put("endingIdExclusive", listOf(endingIdExclusive.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v0-alpha/Show/update",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
